// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ReservationsResult;
//
//    var reservations = Reservations.FromJson(jsonString);

namespace ReservationsResult
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Reservations
    {
        [JsonProperty("reservations")]
        public System.Collections.Generic.List <Reservation> ReservationsReservations { get; set; }
    }

    public partial class Reservation
    {
        [JsonProperty("links")]
        public System.Collections.Generic.List<Link> Links { get; set; }

        [JsonProperty("airlineBookingReference")]
        public string AirlineBookingReference { get; set; }

        [JsonProperty("category")]
        public Category Category { get; set; }

        [JsonProperty("type")]
        public Category Type { get; set; }

        [JsonProperty("noOfTravellers")]
        public long NoOfTravellers { get; set; }

        [JsonProperty("noOfConnections")]
        public long NoOfConnections { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("passengers")]
        public System.Collections.Generic.List<Passenger>  Passengers { get; set; }

        [JsonProperty("connections")]
        public System.Collections.Generic.List<Connection> Connections { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Connection
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("origin")]
        public Destination Origin { get; set; }

        [JsonProperty("destination")]
        public Destination Destination { get; set; }

        [JsonProperty("startTimeLocal")]
        public DateTimeOffset StartTimeLocal { get; set; }

        [JsonProperty("startTimeGMT")]
        public DateTimeOffset StartTimeGmt { get; set; }

        [JsonProperty("endTimeLocal")]
        public DateTimeOffset EndTimeLocal { get; set; }

        [JsonProperty("endTimeGMT")]
        public DateTimeOffset EndTimeGmt { get; set; }

        [JsonProperty("duration")]
        public string Duration { get; set; }

        [JsonProperty("noOfSegments")]
        public long NoOfSegments { get; set; }

        [JsonProperty("flightSegments")]
        public System.Collections.Generic.List<FlightSegment> FlightSegments { get; set; }
    }

    public partial class Destination
    {
        [JsonProperty("airportCode")]
        public string AirportCode { get; set; }

        [JsonProperty("airportName")]
        public string AirportName { get; set; }

        [JsonProperty("cityCode")]
        public string CityCode { get; set; }

        [JsonProperty("cityName")]
        public string CityName { get; set; }

        [JsonProperty("countryCode")]
        public string CountryCode { get; set; }

        [JsonProperty("countryName")]
        public string CountryName { get; set; }

        [JsonProperty("regionCode")]
        public string RegionCode { get; set; }

        [JsonProperty("regionName")]
        public string RegionName { get; set; }
    }

    public partial class FlightSegment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("bookingReference")]
        public string BookingReference { get; set; }

        [JsonProperty("type")]
        public Category Type { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("tatooReference")]
        public long TatooReference { get; set; }

        [JsonProperty("departure")]
        public Destination Departure { get; set; }

        [JsonProperty("arrival")]
        public Destination Arrival { get; set; }

        [JsonProperty("duration")]
        public string Duration { get; set; }

        [JsonProperty("scheduledArrivalDateLocal")]
        public DateTimeOffset ScheduledArrivalDateLocal { get; set; }

        [JsonProperty("scheduledArrivalDateGMT")]
        public DateTimeOffset ScheduledArrivalDateGmt { get; set; }

        [JsonProperty("scheduledDepartureDateLocal")]
        public DateTimeOffset ScheduledDepartureDateLocal { get; set; }

        [JsonProperty("scheduledDepartureDateGMT")]
        public DateTimeOffset ScheduledDepartureDateGmt { get; set; }

        [JsonProperty("checkInStartDateLocal")]
        public DateTimeOffset CheckInStartDateLocal { get; set; }

        [JsonProperty("checkInStartDateGMT")]
        public DateTimeOffset CheckInStartDateGmt { get; set; }

        [JsonProperty("checkInCloseDateLocal")]
        public DateTimeOffset CheckInCloseDateLocal { get; set; }

        [JsonProperty("checkInCloseDateGMT")]
        public DateTimeOffset CheckInCloseDateGmt { get; set; }

        [JsonProperty("operatingCarrier")]
        public TingCarrier OperatingCarrier { get; set; }

        [JsonProperty("marketingCarrier")]
        public TingCarrier MarketingCarrier { get; set; }

        [JsonProperty("passengerFlightSegments")]
        public PassengerFlightSegment[] PassengerFlightSegments { get; set; }
    }

    public partial class TingCarrier
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("flightNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long FlightNumber { get; set; }
    }

    public partial class PassengerFlightSegment
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("passengerType")]
        public string PassengerType { get; set; }

        [JsonProperty("bookingClass")]
        public string BookingClass { get; set; }

        [JsonProperty("reservationStatus")]
        public Category ReservationStatus { get; set; }

        [JsonProperty("associatedPassenger")]
        public string AssociatedPassenger { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("rel")]
        public string Rel { get; set; }

        [JsonProperty("href")]
        public string Href { get; set; }
    }

    public partial class Passenger
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("tatooReference")]
        public long TatooReference { get; set; }

        [JsonProperty("firstName")]
        public string FirstName { get; set; }

        [JsonProperty("lastName")]
        public string LastName { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type")]
        public Category Type { get; set; }

        [JsonProperty("gender")]
        public Category Gender { get; set; }
    }

    public partial class Reservations
    {
        public static Reservations FromJson(string json)
        {
            Reservations R;
            R=JsonConvert.DeserializeObject<Reservations>(json, ReservationsResult.Converter.Settings);
            if (R == null) throw new Exception(json);
            return R;
        }
    }

    public static class Serialize
    {
        public static string ToJson(this Reservations self) => JsonConvert.SerializeObject(self, ReservationsResult.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
